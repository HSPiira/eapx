// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================
// Common Enums
// =========================================

enum Gender {
  MALE   @map("Male") // Male
  FEMALE @map("Female") // Female
  OTHER  @map("Other") // Other
}

enum Language {
  ENGLISH @map("English") // English
  SPANISH @map("Spanish") // Spanish
  FRENCH  @map("French") // French
  GERMAN  @map("German") // German
  OTHER   @map("Other") // Other
}

enum ContactMethod {
  EMAIL    @map("Email") // Email
  PHONE    @map("Phone") // Phone
  SMS      @map("SMS") // SMS
  WHATSAPP @map("WhatsApp") // WhatsApp
  OTHER    @map("Other") // Other
}

enum Frequency {
  ONCE      @map("Once") // Once
  WEEKLY    @map("Weekly") // Weekly
  MONTHLY   @map("Monthly") // Monthly
  QUARTERLY @map("Quarterly") // Quarterly
  ANNUALLY  @map("Annually") // Annually
}

enum Unit {
  PERCENTAGE @map("Percentage") // %
  COUNT      @map("Count") // Integer count
  SCORE      @map("Score") // e.g., Satisfaction out of 10
  TIME       @map("Time") // Duration e.g., in minutes/days
}

enum EntityStatus {
  ACTIVE    @map("Active") // Entity is active and in use
  INACTIVE  @map("Inactive") // Entity is inactive but not deleted
  ARCHIVED  @map("Archived") // Entity is archived for historical purposes
  DELETED   @map("Deleted") // Entity is soft deleted
  PENDING   @map("Pending") // Entity is pending approval or activation
  SUSPENDED @map("Suspended") // Entity is temporarily suspended
  EXPIRED   @map("Expired") // Entity has expired
  DRAFT     @map("Draft") // Entity is in draft state
  PUBLISHED @map("Published") // Entity is published and publicly available
  PRIVATE   @map("Private") // Entity is private and not publicly available
}

// =========================================
// Authentication & Authorization Domain
// =========================================

/// Represents an authenticated user in the system.
model User {
  id                 String     @id @default(cuid())
  email              String?    @unique
  password           String?
  emailVerified      DateTime?
  lastLoginAt        DateTime?
  preferredLanguage  Language?
  timezone           String?
  isTwoFactorEnabled Boolean    @default(false)
  status             UserStatus @default(ACTIVE)
  statusChangedAt    DateTime? // When the status was last changed
  inactiveReason     String? // Reason if status is INACTIVE
  suspensionReason   String? // Reason if status is SUSPENDED
  banReason          String? // Reason if status is BANNED
  metadata           Json?
  deletedAt          DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  accounts          Account[]
  sessions          Session[]
  userRoles         UserRole[]
  auditLogs         AuditLog[]
  documents         Document[]
  profile           Profile?
  staffProfiles     Staff[]
  beneficiaries     Beneficiary[]          @relation("UserBeneficiaries")
  guardianOf        Beneficiary[]          @relation("UserGuardians")
  statusTransitions UserStatusTransition[] // Track status change history

  @@index([lastLoginAt])
  @@index([isTwoFactorEnabled])
  @@index([status])
  @@index([statusChangedAt])
  @@index([deletedAt])
}

/// Links a user to an external identity provider (Microsoft, GitHub, etc).
model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  lastLoginAt       DateTime?
  deletedAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([lastLoginAt])
  @@index([deletedAt])
}

/// Stores active sessions for stateless authentication (JWT or DB).
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  isValid      Boolean  @default(true)

  user User @relation(fields: [userId], references: [id])

  @@index([isValid])
}

/// Used for email/passwordless login flows or account recovery.
model VerificationToken {
  identifier String // Email or phone identifier
  token      String   @unique // One-time token (sent via email/SMS)
  expires    DateTime // Expiration timestamp

  @@unique([identifier, token]) // Ensures no reuse per email/token combo
}

/// Represents a group of permissions (e.g. 'Admin', 'Manager', 'User').
model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  deletedAt   DateTime?

  permissions RolePermission[]
  users       UserRole[]

  @@index([deletedAt])
}

/// Represents a single action a user can perform (e.g. 'view_users', 'edit_asset').
model Permission {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  deletedAt   DateTime?

  roles RolePermission[]

  @@index([deletedAt])
}

/// Pivot table assigning permissions to roles.
model RolePermission {
  id           String @id @default(cuid()) // Unique ID
  roleId       String // FK to Role
  permissionId String // FK to Permission

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId]) // Prevent duplicate entries
}

/// Assigns one or more roles to a user.
model UserRole {
  id     String @id @default(cuid()) // Unique ID
  userId String // FK to User
  roleId String // FK to Role

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId]) // Prevent duplicate role assignments
}

// =========================================
// Profile & Identity Domain
// =========================================

/// Represents a person's profile information
model Profile {
  id                     String         @id @default(cuid())
  fullName               String
  preferredName          String?
  dob                    DateTime?
  gender                 Gender?
  phone                  String?
  email                  String?
  image                  String?
  address                String?
  emergencyContactName   String?
  emergencyContactPhone  String?
  emergencyContactEmail  String?
  preferredLanguage      Language?
  preferredContactMethod ContactMethod?
  metadata               Json?
  deletedAt              DateTime?

  // Relationships
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?      @unique
  staff       Staff?
  beneficiary Beneficiary?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([preferredLanguage])
  @@index([preferredContactMethod])
  @@index([deletedAt])
}

// =========================================
// Organization & Business Domain
// =========================================

/// Represents a client organization in the system
model Client {
  id                     String         @id @default(cuid())
  name                   String
  email                  String?
  phone                  String?
  website                String?
  address                String?
  billingAddress         String?
  taxId                  String?
  contactPerson          String?
  contactEmail           String?
  contactPhone           String?
  industryId             String?
  industry               Industry?      @relation(fields: [industryId], references: [id])
  status                 BaseStatus     @default(ACTIVE)
  preferredContactMethod ContactMethod?
  timezone               String?
  isVerified             Boolean        @default(false)
  notes                  String?
  metadata               Json?
  deletedAt              DateTime?

  contracts          Contract[]
  documents          Document[]
  kpis               KPI[]
  kpiAssignments     KPIAssignment[]
  serviceAssignments ServiceAssignment[]
  staff              Staff[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([name])
  @@index([email])
  @@index([industryId])
  @@index([isVerified])
  @@index([preferredContactMethod])
  @@index([deletedAt])
}

/// Represents an industry classification
model Industry {
  id          String     @id @default(cuid())
  name        String     @unique
  code        String?    @unique
  description String?
  parentId    String?
  parent      Industry?  @relation("IndustryHierarchy", fields: [parentId], references: [id])
  children    Industry[] @relation("IndustryHierarchy")
  externalId  String?
  metadata    Json?
  deletedAt   DateTime?

  clients Client[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([code])
  @@index([parentId])
  @@index([externalId])
  @@index([deletedAt])
}

/// Represents a service contract between the client and service provider
model Contract {
  id       String @id @default(cuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  startDate     DateTime
  endDate       DateTime
  renewalDate   DateTime?
  billingRate   Float
  isRenewable   Boolean       @default(true)
  isAutoRenew   Boolean       @default(false)
  paymentStatus PaymentStatus @default(PENDING)

  paymentFrequency String?
  paymentTerms     String?
  currency         String?   @default("UGX")
  lastBillingDate  DateTime?
  nextBillingDate  DateTime?

  documentUrl       String?
  status            ContractStatus @default(ACTIVE)
  signedBy          String?
  signedAt          DateTime?
  terminationReason String?
  notes             String?
  deletedAt         DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documents          Document[]
  kpis               KPI[]
  kpiAssignments     KPIAssignment[]
  serviceAssignments ServiceAssignment[]

  @@index([clientId])
  @@index([status])
  @@index([endDate])
  @@index([paymentStatus])
  @@index([isRenewable])
  @@index([deletedAt])
}

// =========================================
// Service Management Domain
// =========================================

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  metadata    Json?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  services Service[]

  @@index([deletedAt])
}

model Service {
  id            String          @id @default(cuid())
  name          String
  description   String?
  categoryId    String
  category      ServiceCategory @relation(fields: [categoryId], references: [id])
  status        BaseStatus      @default(ACTIVE)
  duration      Int?
  capacity      Int?
  prerequisites String?
  isPublic      Boolean         @default(true)
  price         Float?
  metadata      Json?
  deletedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignments       ServiceAssignment[]
  ServiceProvider   ServiceProvider?    @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId String?
  ServiceSession    ServiceSession[]

  @@index([status])
  @@index([isPublic])
  @@index([categoryId])
  @@index([deletedAt])
}

model ServiceAssignment {
  id         String           @id @default(cuid())
  serviceId  String
  contractId String
  service    Service          @relation(fields: [serviceId], references: [id])
  contract   Contract         @relation(fields: [contractId], references: [id])
  status     AssignmentStatus @default(PENDING)
  startDate  DateTime
  endDate    DateTime?
  frequency  Frequency
  metadata   Json?
  deletedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client?  @relation(fields: [clientId], references: [id])
  clientId  String?

  @@index([status])
  @@index([startDate])
  @@index([deletedAt])
}

model ServiceProvider {
  id              String              @id @default(cuid())
  name            String
  type            ServiceProviderType
  contactEmail    String?
  contactPhone    String?
  location        String?
  qualifications  String[]
  specializations String[]
  availability    Json?
  rating          Float?
  isVerified      Boolean             @default(false)
  metadata        Json?
  deletedAt       DateTime?
  status          WorkStatus          @default(ACTIVE)

  services Service[]
  sessions ServiceSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([isVerified])
  @@index([rating])
  @@index([deletedAt])
}

model ServiceSession {
  id                 String        @id @default(cuid())
  serviceId          String
  providerId         String
  scheduledAt        DateTime
  completedAt        DateTime?
  status             SessionStatus @default(SCHEDULED)
  notes              String?
  feedback           String?
  duration           Int?
  location           String?
  cancellationReason String?
  rescheduleCount    Int           @default(0)
  isGroupSession     Boolean       @default(false)
  metadata           Json?
  deletedAt          DateTime?

  staffId       String?
  beneficiaryId String?

  staff           Staff?            @relation(fields: [staffId], references: [id])
  beneficiary     Beneficiary?      @relation(fields: [beneficiaryId], references: [id])
  service         Service           @relation(fields: [serviceId], references: [id])
  provider        ServiceProvider   @relation(fields: [providerId], references: [id])
  SessionFeedback SessionFeedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([scheduledAt])
  @@index([isGroupSession])
  @@index([providerId])
  @@index([serviceId])
  @@index([deletedAt])
}

model SessionFeedback {
  id        String    @id @default(cuid())
  sessionId String
  rating    Int
  comment   String?
  metadata  Json?
  deletedAt DateTime?
  createdAt DateTime  @default(now())

  session ServiceSession @relation(fields: [sessionId], references: [id])

  @@index([deletedAt])
}

// =========================================
// Staff & Beneficiary Management Domain
// =========================================

/// Represents a staff member in an organization
model Staff {
  id                    String     @id @default(cuid())
  profileId             String     @unique
  clientId              String
  role                  StaffRole
  startDate             DateTime
  endDate               DateTime?
  status                WorkStatus @default(ACTIVE)
  qualifications        String[]
  specializations       String[]
  preferredWorkingHours Json?
  emergencyContactName  String?
  emergencyContactPhone String?
  emergencyContactEmail String?
  metadata              Json?
  deletedAt             DateTime?

  userId String

  // Relations
  user           User             @relation(fields: [userId], references: [id])
  profile        Profile          @relation(fields: [profileId], references: [id])
  client         Client           @relation(fields: [clientId], references: [id])
  beneficiaries  Beneficiary[]
  ServiceSession ServiceSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([role])
  @@index([clientId])
  @@index([deletedAt])
}

/// Represents a beneficiary in the system
model Beneficiary {
  id                String       @id @default(cuid())
  profileId         String       @unique
  relation          RelationType
  isStaffLink       Boolean      @default(false)
  staffId           String
  guardianId        String?
  userLinkId        String?
  status            BaseStatus   @default(ACTIVE)
  lastServiceDate   DateTime?
  preferredLanguage Language?
  notes             String?
  deletedAt         DateTime?

  // Relations
  profile  Profile @relation(fields: [profileId], references: [id])
  staff    Staff   @relation(fields: [staffId], references: [id])
  guardian User?   @relation("UserGuardians", fields: [guardianId], references: [id])
  userLink User?   @relation("UserBeneficiaries", fields: [userLinkId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ServiceSession ServiceSession[]

  @@index([status])
  @@index([lastServiceDate])
  @@index([deletedAt])
}

// =========================================
// KPI & Performance Management Domain
// =========================================

/// Represents a Key Performance Indicator (KPI) in the system
model KPI {
  id                String     @id @default(cuid())
  name              String
  description       String?
  typeId            String
  type              KpiType    @relation(fields: [typeId], references: [id])
  unit              String
  unitType          Unit
  targetValue       String?
  isPublic          Boolean    @default(true)
  calculationMethod String?
  frequency         Frequency?
  metadata          Json?
  deletedAt         DateTime?

  // Relations
  assignments KPIAssignment[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  client     Client?   @relation(fields: [clientId], references: [id])
  clientId   String?
  Contract   Contract? @relation(fields: [contractId], references: [id])
  contractId String?

  @@index([typeId])
  @@index([isPublic])
  @@index([frequency])
  @@index([deletedAt])
}

/// Represents a type or category of KPI
model KpiType {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  weight      Int?
  metadata    Json?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  kpis KPI[]

  @@index([name])
  @@index([deletedAt])
}

/// Represents an assignment of a KPI to a contract
model KPIAssignment {
  id          String           @id @default(cuid())
  kpiId       String
  contractId  String
  targetValue String?
  frequency   Frequency
  status      AssignmentStatus
  notes       String?
  startDate   DateTime
  endDate     DateTime?
  metadata    Json?
  deletedAt   DateTime?

  // Relations
  kpi      KPI      @relation(fields: [kpiId], references: [id])
  contract Contract @relation(fields: [contractId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client?  @relation(fields: [clientId], references: [id])
  clientId  String?

  @@index([kpiId])
  @@index([contractId])
  @@index([status])
  @@index([startDate])
  @@index([deletedAt])
}

// =========================================
// Document Management Domain
// =========================================

/// Represents a document in the system (contracts, reports, certifications, etc.)
model Document {
  id                String       @id @default(cuid())
  title             String
  description       String?
  type              DocumentType
  url               String
  fileSize          Int?
  fileType          String?
  version           Int          @default(1)
  isLatest          Boolean      @default(true)
  previousVersionId String?
  previousVersion   Document?    @relation("DocumentVersions", fields: [previousVersionId], references: [id])
  nextVersions      Document[]   @relation("DocumentVersions")

  status         DocumentStatus @default(DRAFT)
  expiryDate     DateTime?
  isConfidential Boolean        @default(false)
  tags           String[]
  metadata       Json?
  deletedAt      DateTime?

  uploadedById String?
  uploadedBy   User?     @relation(fields: [uploadedById], references: [id])
  clientId     String?
  client       Client?   @relation(fields: [clientId], references: [id])
  contractId   String?
  contract     Contract? @relation(fields: [contractId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([clientId])
  @@index([contractId])
  @@index([uploadedById])
  @@index([status])
  @@index([isConfidential])
  @@index([expiryDate])
  @@index([deletedAt])
}

// =========================================
// Audit & Change Tracking Domain
// =========================================

/// Represents an audit log entry
model AuditLog {
  id         String     @id @default(cuid()) // Unique identifier for the audit log
  action     ActionType // Action performed (e.g., 'create', 'update', 'delete')
  entityType String? // Type of entity being acted upon
  entityId   String? // ID of entity being acted upon
  data       Json? // Additional data related to the action
  ipAddress  String? // IP address of the user
  userAgent  String? // User agent of the browser/client
  timestamp  DateTime   @default(now()) // Date and time when the action was performed
  User       User?      @relation(fields: [userId], references: [id]) // User who performed the action
  userId     String? // User ID of the user who performed the action

  @@index([action]) // Index for faster action-based queries
  @@index([timestamp]) // Index for faster timestamp-based queries
  @@index([entityType, entityId]) // Index for faster entity-based queries
}

/// Tracks all entity changes across the system
model EntityChange {
  id           String     @id @default(cuid())
  entityType   String // Type of entity (e.g., "User", "Profile", etc.)
  entityId     String // ID of the changed entity
  changeType   ChangeType // Type of change (CREATE, UPDATE, DELETE, RESTORE)
  changedAt    DateTime   @default(now())
  changedBy    String? // User ID who made the change
  changeReason String? // Optional reason for the change
  oldData      Json? // Previous state of the entity
  newData      Json? // New state of the entity
  metadata     Json? // Additional metadata about the change
  isActive     Boolean    @default(true)
  deletedAt    DateTime? // When the entity was soft deleted (if applicable)

  fieldChanges FieldChange[] // Field-level changes associated with this change

  @@unique([entityType, entityId, changedAt])
  @@index([entityType])
  @@index([entityId])
  @@index([changedAt])
  @@index([changedBy])
  @@index([changeType])
  @@index([isActive])
  @@index([deletedAt]) // Index for faster soft delete queries
}

/// Tracks field-level changes for detailed audit trail
model FieldChange {
  id             String       @id @default(cuid())
  entityChangeId String // Reference to the parent EntityChange
  entityChange   EntityChange @relation(fields: [entityChangeId], references: [id])
  fieldName      String // Name of the changed field
  oldValue       Json? // Previous value
  newValue       Json? // New value
  changeType     ChangeType // Type of change (CREATE, UPDATE, DELETE)
  deletedAt      DateTime? // Soft delete timestamp
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([entityChangeId])
  @@index([fieldName])
  @@index([changeType])
  @@index([deletedAt]) // Index for faster soft delete queries
}

// =========================================
// Status & Type Enums
// =========================================

/// Base status enum for most entities
enum BaseStatus {
  ACTIVE   @map("Active") // Entity is active and in use
  INACTIVE @map("Inactive") // Entity is inactive but not deleted
  PENDING  @map("Pending") // Entity is pending approval or activation
  ARCHIVED @map("Archived") // Entity is archived for historical purposes
  DELETED  @map("Deleted") // Entity is soft deleted
}

/// Status enum for work-related entities (Staff, ServiceProvider)
enum WorkStatus {
  ACTIVE     @map("Active") // Currently working
  INACTIVE   @map("Inactive") // Not working
  ON_LEAVE   @map("On Leave") // On leave
  TERMINATED @map("Terminated") // Terminated
  SUSPENDED  @map("Suspended") // Suspended
  RESIGNED   @map("Resigned") // Resigned
}

/// Status enum for documents
enum DocumentStatus {
  DRAFT     @map("Draft") // Draft version
  PUBLISHED @map("Published") // Published and active
  ARCHIVED  @map("Archived") // Archived for reference
  EXPIRED   @map("Expired") // No longer valid
}

/// Status enum for contracts
enum ContractStatus {
  ACTIVE     @map("Active") // Contract is active
  EXPIRED    @map("Expired") // Contract has expired
  TERMINATED @map("Terminated") // Contract was terminated
  RENEWED    @map("Renewed") // Contract was renewed
  PENDING    @map("Pending") // Contract is pending approval
  DRAFT      @map("Draft") // Contract is in draft
}

/// Status enum for service sessions
enum SessionStatus {
  SCHEDULED   @map("Scheduled") // Session is scheduled
  RESCHEDULED @map("Rescheduled") // Session was rescheduled
  COMPLETED   @map("Completed") // Session was completed
  CANCELED    @map("Canceled") // Session was canceled
  NO_SHOW     @map("No Show") // Client did not show up
  POSTPONED   @map("Postponed") // Session was postponed
}

/// Status enum for assignments
enum AssignmentStatus {
  PENDING   @map("Pending") // Assignment is pending
  ONGOING   @map("Ongoing") // Assignment is in progress
  COMPLETED @map("Completed") // Assignment is completed
  CANCELLED @map("Cancelled") // Assignment was cancelled
}

enum StaffRole {
  ADMIN     @map("Admin") // Admin
  MANAGER   @map("Manager") // Manager
  STAFF     @map("Staff") // Staff
  VOLUNTEER @map("Volunteer") // Volunteer
}

enum StaffStatus {
  ACTIVE     @map("Active") // Currently working
  INACTIVE   @map("Inactive") // Not working
  ON_LEAVE   @map("On Leave") // On leave
  TERMINATED @map("Terminated") // Terminated
  SUSPENDED  @map("Suspended") // Suspended
  RESIGNED   @map("Resigned") // Resigned
  OTHER      @map("Other") // Other
}

enum RelationType {
  CHILD       @map("Child") // Child
  SPOUSE      @map("Spouse") // Spouse
  PARENT      @map("Parent") // Parent
  SIBLING     @map("Sibling") // Sibling
  GRANDPARENT @map("Grandparent") // Grandparent
  GUARDIAN    @map("Guardian") // Guardian
  FRIEND      @map("Friend") // Friend
  NEIGHBOR    @map("Neighbor") // Neighbor
  COUSIN      @map("Cousin") // Cousin
  OTHER       @map("Other") // Other
}

enum PaymentStatus {
  PENDING   @map("Pending") // Pending
  PAID      @map("Paid") // Paid
  OVERDUE   @map("Overdue") // Overdue
  CANCELLED @map("Cancelled") // Cancelled
  REFUNDED  @map("Refunded") // Refunded
}

enum DocumentType {
  CONTRACT           @map("contract") // Contract
  CERTIFICATION      @map("certification") // Certification
  KPI_REPORT         @map("kpi_report") // KPI Report
  FEEDBACK_SUMMARY   @map("feedback_summary") // Feedback Summary
  BILLING_REPORT     @map("billing_report") // Billing Report
  UTILIZATION_REPORT @map("utilization_report") // Utilization Report
  OTHER              @map("other") // Other
}

enum OrgStatus {
  ACTIVE     @map("Active") // Active
  INACTIVE   @map("Inactive") // Inactive
  TERMINATED @map("Terminated") // Terminated
  PENDING    @map("Pending") // Pending
}

enum ServiceStatus {
  ACTIVE    @map("Active") // Active
  INACTIVE  @map("Inactive") // Inactive
  SUSPENDED @map("Suspended") // Suspended
}

enum ServiceProviderType {
  COUNSELOR @map("Counselor") // Counselor
  CLINIC    @map("Clinic") // Clinic
  HOTLINE   @map("Hotline") // Hotline
  COACH     @map("Coach") // Coach
  OTHER     @map("Other") // Other
}

enum ActionType {
  CREATE  @map("Create") // Create
  UPDATE  @map("Update") // Update
  DELETE  @map("Delete") // Delete
  LOGIN   @map("Login") // Login
  LOGOUT  @map("Logout") // Logout
  APPROVE @map("Approve") // Approve
  REJECT  @map("Reject") // Reject
  LIST    @map("List") // List/View
  OTHER   @map("Other") // Other
}

enum ChangeType {
  CREATE     @map("Create") // Create
  UPDATE     @map("Update") // Update
  DELETE     @map("Delete") // Delete
  RESTORE    @map("Restore") // Restore
  ARCHIVE    @map("Archive") // Archive
  UNARCHIVE  @map("Unarchive") // Unarchive
  DEACTIVATE @map("Deactivate") // Deactivate
  ACTIVATE   @map("Activate") // Activate
}

/// Status enum for user accounts
enum UserStatus {
  ACTIVE               @map("Active") // User is active and can access the system
  SUSPENDED            @map("Suspended") // User is temporarily suspended
  BANNED               @map("Banned") // User is permanently banned
  PENDING_VERIFICATION @map("Pending Verification") // User needs to verify their email
  INACTIVE             @map("Inactive") // User hasn't logged in for a while
}

/// Tracks user status changes for audit and compliance
model UserStatusTransition {
  id         String     @id @default(cuid())
  userId     String // User whose status changed
  fromStatus UserStatus // Previous status
  toStatus   UserStatus // New status
  reason     String? // Why the status was changed
  metadata   Json? // Additional context about the change
  changedBy  String? // User ID who made the change (null if system)
  ipAddress  String? // IP address where change was made
  userAgent  String? // User agent where change was made

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([fromStatus])
  @@index([toStatus])
  @@index([createdAt])
}
